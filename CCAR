/**
 * 先設置一個class private 不可繼承 protected可繼承 public可繼承可更改
 *給燈和輪子有數值
 *然後如果在main有用到
 *就會跑出來
 *ccar（）是建構子
 *有～的是執行後消失
 *author １０９２０６３陳芸慧yunhe0603 
 *version 1.0
 *since 2021-3-12
 */
#include <iostream>
#include <string>
using namespace std;
class CCAR {
private:
string nickname;
protected:
int light;
int wheel;
public:
CCAR() :light(2)
{
wheel = 5;
cout << "car's constructor(wheel=" << wheel << ")" << endl;
}
CCAR(string nickname) :light(2)
{
wheel = 5;
this->nickname = nickname;
cout << "car's constructor(nickname=" << nickname << ")" << endl;
}
~CCAR()
{
cout << "car's destructor" << "(" << nickname << ")" << endl;
}
void start()
{
cout << "car's start" << endl;
}
void stop()
{
cout << "car's stop" << endl;
}
void turn()
{
cout << "car's turn" << endl;
}
};
//--------------------------
/**
 * 這是地２個class
 * 他繼承了上面ccar
 * 然後修改了一些數值
 * @return nothig
 */
class CBMW : public CCAR {
public:
CBMW() { light = 4; wheel = 4; cout << "bmw's constructor" << endl; }
~CBMW() { cout << "bmw's destructor" << endl; }
void Abs()
{
cout << "bmw's abs" << endl;
}
void start()
{
cout << "bmw's start" << endl;
CCAR::start();//scope operator

}
};
//--------------------------
/**
 * 執行上面的副程式 
 */
int main(int argc, const char * argv[]) {
CBMW bmw;
// bmw.light=3;
bmw.start();
bmw.Abs();
bmw.stop();

return 0;
}
